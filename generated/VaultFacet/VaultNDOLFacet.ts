// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BuyNDOL extends ethereum.Event {
  get params(): BuyNDOL__Params {
    return new BuyNDOL__Params(this);
  }
}

export class BuyNDOL__Params {
  _event: BuyNDOL;

  constructor(event: BuyNDOL) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get ndolAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class SellNDOL extends ethereum.Event {
  get params(): SellNDOL__Params {
    return new SellNDOL__Params(this);
  }
}

export class SellNDOL__Params {
  _event: SellNDOL;

  constructor(event: SellNDOL) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get ndolAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Swap extends ethereum.Event {
  get params(): Swap__Params {
    return new Swap__Params(this);
  }
}

export class Swap__Params {
  _event: Swap;

  constructor(event: Swap) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenIn(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenOut(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amountIn(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amountOut(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class VaultNDOLFacet extends ethereum.SmartContract {
  static bind(address: Address): VaultNDOLFacet {
    return new VaultNDOLFacet("VaultNDOLFacet", address);
  }

  availableReserve(_token: Address): BigInt {
    let result = super.call(
      "availableReserve",
      "availableReserve(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );

    return result[0].toBigInt();
  }

  try_availableReserve(_token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "availableReserve",
      "availableReserve(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  buyNDOL(_token: Address, _receiver: Address): BigInt {
    let result = super.call("buyNDOL", "buyNDOL(address,address):(uint256)", [
      ethereum.Value.fromAddress(_token),
      ethereum.Value.fromAddress(_receiver)
    ]);

    return result[0].toBigInt();
  }

  try_buyNDOL(
    _token: Address,
    _receiver: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "buyNDOL",
      "buyNDOL(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromAddress(_receiver)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feeReserves(_token: Address): BigInt {
    let result = super.call("feeReserves", "feeReserves(address):(uint256)", [
      ethereum.Value.fromAddress(_token)
    ]);

    return result[0].toBigInt();
  }

  try_feeReserves(_token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "feeReserves",
      "feeReserves(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRedemptionAmount(_token: Address, _ndolAmount: BigInt): BigInt {
    let result = super.call(
      "getRedemptionAmount",
      "getRedemptionAmount(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_ndolAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_getRedemptionAmount(
    _token: Address,
    _ndolAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRedemptionAmount",
      "getRedemptionAmount(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_ndolAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRedemptionBasisPoints(_token: Address): BigInt {
    let result = super.call(
      "getRedemptionBasisPoints",
      "getRedemptionBasisPoints(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );

    return result[0].toBigInt();
  }

  try_getRedemptionBasisPoints(_token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRedemptionBasisPoints",
      "getRedemptionBasisPoints(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRedemptionCollateral(_token: Address): BigInt {
    let result = super.call(
      "getRedemptionCollateral",
      "getRedemptionCollateral(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );

    return result[0].toBigInt();
  }

  try_getRedemptionCollateral(_token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRedemptionCollateral",
      "getRedemptionCollateral(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRedemptionCollateralUsd(_token: Address): BigInt {
    let result = super.call(
      "getRedemptionCollateralUsd",
      "getRedemptionCollateralUsd(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );

    return result[0].toBigInt();
  }

  try_getRedemptionCollateralUsd(_token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRedemptionCollateralUsd",
      "getRedemptionCollateralUsd(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTargetAdjustedFee(_token: Address, _fee: BigInt): BigInt {
    let result = super.call(
      "getTargetAdjustedFee",
      "getTargetAdjustedFee(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_fee)
      ]
    );

    return result[0].toBigInt();
  }

  try_getTargetAdjustedFee(
    _token: Address,
    _fee: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTargetAdjustedFee",
      "getTargetAdjustedFee(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_fee)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  guaranteedUsd(_token: Address): BigInt {
    let result = super.call(
      "guaranteedUsd",
      "guaranteedUsd(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );

    return result[0].toBigInt();
  }

  try_guaranteedUsd(_token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "guaranteedUsd",
      "guaranteedUsd(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ndol(): Address {
    let result = super.call("ndol", "ndol():(address)", []);

    return result[0].toAddress();
  }

  try_ndol(): ethereum.CallResult<Address> {
    let result = super.tryCall("ndol", "ndol():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ndolAmounts(_token: Address): BigInt {
    let result = super.call("ndolAmounts", "ndolAmounts(address):(uint256)", [
      ethereum.Value.fromAddress(_token)
    ]);

    return result[0].toBigInt();
  }

  try_ndolAmounts(_token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ndolAmounts",
      "ndolAmounts(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  poolAmounts(_token: Address): BigInt {
    let result = super.call("poolAmounts", "poolAmounts(address):(uint256)", [
      ethereum.Value.fromAddress(_token)
    ]);

    return result[0].toBigInt();
  }

  try_poolAmounts(_token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "poolAmounts",
      "poolAmounts(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  reservedAmounts(_token: Address): BigInt {
    let result = super.call(
      "reservedAmounts",
      "reservedAmounts(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );

    return result[0].toBigInt();
  }

  try_reservedAmounts(_token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "reservedAmounts",
      "reservedAmounts(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sellNDOL(_token: Address, _receiver: Address): BigInt {
    let result = super.call("sellNDOL", "sellNDOL(address,address):(uint256)", [
      ethereum.Value.fromAddress(_token),
      ethereum.Value.fromAddress(_receiver)
    ]);

    return result[0].toBigInt();
  }

  try_sellNDOL(
    _token: Address,
    _receiver: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sellNDOL",
      "sellNDOL(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromAddress(_receiver)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  swap(_tokenIn: Address, _tokenOut: Address, _receiver: Address): BigInt {
    let result = super.call("swap", "swap(address,address,address):(uint256)", [
      ethereum.Value.fromAddress(_tokenIn),
      ethereum.Value.fromAddress(_tokenOut),
      ethereum.Value.fromAddress(_receiver)
    ]);

    return result[0].toBigInt();
  }

  try_swap(
    _tokenIn: Address,
    _tokenOut: Address,
    _receiver: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "swap",
      "swap(address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_tokenIn),
        ethereum.Value.fromAddress(_tokenOut),
        ethereum.Value.fromAddress(_receiver)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  swapFeeBasisPoints(): BigInt {
    let result = super.call(
      "swapFeeBasisPoints",
      "swapFeeBasisPoints():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_swapFeeBasisPoints(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "swapFeeBasisPoints",
      "swapFeeBasisPoints():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class BuyNDOLCall extends ethereum.Call {
  get inputs(): BuyNDOLCall__Inputs {
    return new BuyNDOLCall__Inputs(this);
  }

  get outputs(): BuyNDOLCall__Outputs {
    return new BuyNDOLCall__Outputs(this);
  }
}

export class BuyNDOLCall__Inputs {
  _call: BuyNDOLCall;

  constructor(call: BuyNDOLCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class BuyNDOLCall__Outputs {
  _call: BuyNDOLCall;

  constructor(call: BuyNDOLCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SellNDOLCall extends ethereum.Call {
  get inputs(): SellNDOLCall__Inputs {
    return new SellNDOLCall__Inputs(this);
  }

  get outputs(): SellNDOLCall__Outputs {
    return new SellNDOLCall__Outputs(this);
  }
}

export class SellNDOLCall__Inputs {
  _call: SellNDOLCall;

  constructor(call: SellNDOLCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SellNDOLCall__Outputs {
  _call: SellNDOLCall;

  constructor(call: SellNDOLCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SwapCall extends ethereum.Call {
  get inputs(): SwapCall__Inputs {
    return new SwapCall__Inputs(this);
  }

  get outputs(): SwapCall__Outputs {
    return new SwapCall__Outputs(this);
  }
}

export class SwapCall__Inputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get _tokenIn(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenOut(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _receiver(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SwapCall__Outputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ClosePosition extends ethereum.Event {
  get params(): ClosePosition__Params {
    return new ClosePosition__Params(this);
  }
}

export class ClosePosition__Params {
  _event: ClosePosition;

  constructor(event: ClosePosition) {
    this._event = event;
  }

  get key(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get size(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get collateral(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get averagePrice(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get entryFundingRate(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get reserveAmount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get realisedPnl(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class DecreasePosition extends ethereum.Event {
  get params(): DecreasePosition__Params {
    return new DecreasePosition__Params(this);
  }
}

export class DecreasePosition__Params {
  _event: DecreasePosition;

  constructor(event: DecreasePosition) {
    this._event = event;
  }

  get key(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get collateralToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get indexToken(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get collateralDelta(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get sizeDelta(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get isLong(): boolean {
    return this._event.parameters[6].value.toBoolean();
  }

  get price(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class IncreasePosition extends ethereum.Event {
  get params(): IncreasePosition__Params {
    return new IncreasePosition__Params(this);
  }
}

export class IncreasePosition__Params {
  _event: IncreasePosition;

  constructor(event: IncreasePosition) {
    this._event = event;
  }

  get key(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get collateralToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get indexToken(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get collateralDelta(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get sizeDelta(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get isLong(): boolean {
    return this._event.parameters[6].value.toBoolean();
  }

  get price(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class LiquidatePosition extends ethereum.Event {
  get params(): LiquidatePosition__Params {
    return new LiquidatePosition__Params(this);
  }
}

export class LiquidatePosition__Params {
  _event: LiquidatePosition;

  constructor(event: LiquidatePosition) {
    this._event = event;
  }

  get key(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get collateralToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get indexToken(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get isLong(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }

  get size(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get collateral(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get reserveAmount(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get realisedPnl(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get markPrice(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }
}

export class UpdatePosition extends ethereum.Event {
  get params(): UpdatePosition__Params {
    return new UpdatePosition__Params(this);
  }
}

export class UpdatePosition__Params {
  _event: UpdatePosition;

  constructor(event: UpdatePosition) {
    this._event = event;
  }

  get key(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get size(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get collateral(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get averagePrice(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get entryFundingRate(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get reserveAmount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get realisedPnl(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class VaultFacet__getDeltaResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class VaultFacet__getPositionResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: boolean;
  value7: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: boolean,
    value7: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }
}

export class VaultFacet__getPositionDeltaResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class VaultFacet__validateLiquidationResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class VaultFacet extends ethereum.SmartContract {
  static bind(address: Address): VaultFacet {
    return new VaultFacet("VaultFacet", address);
  }

  cumulativeFundingRates(_token: Address): BigInt {
    let result = super.call(
      "cumulativeFundingRates",
      "cumulativeFundingRates(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );

    return result[0].toBigInt();
  }

  try_cumulativeFundingRates(_token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "cumulativeFundingRates",
      "cumulativeFundingRates(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decreasePosition(
    _account: Address,
    _collateralToken: Address,
    _indexToken: Address,
    _collateralDelta: BigInt,
    _sizeDelta: BigInt,
    _isLong: boolean,
    _receiver: Address
  ): BigInt {
    let result = super.call(
      "decreasePosition",
      "decreasePosition(address,address,address,uint256,uint256,bool,address):(uint256)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromAddress(_collateralToken),
        ethereum.Value.fromAddress(_indexToken),
        ethereum.Value.fromUnsignedBigInt(_collateralDelta),
        ethereum.Value.fromUnsignedBigInt(_sizeDelta),
        ethereum.Value.fromBoolean(_isLong),
        ethereum.Value.fromAddress(_receiver)
      ]
    );

    return result[0].toBigInt();
  }

  try_decreasePosition(
    _account: Address,
    _collateralToken: Address,
    _indexToken: Address,
    _collateralDelta: BigInt,
    _sizeDelta: BigInt,
    _isLong: boolean,
    _receiver: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "decreasePosition",
      "decreasePosition(address,address,address,uint256,uint256,bool,address):(uint256)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromAddress(_collateralToken),
        ethereum.Value.fromAddress(_indexToken),
        ethereum.Value.fromUnsignedBigInt(_collateralDelta),
        ethereum.Value.fromUnsignedBigInt(_sizeDelta),
        ethereum.Value.fromBoolean(_isLong),
        ethereum.Value.fromAddress(_receiver)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fundingInterval(): BigInt {
    let result = super.call(
      "fundingInterval",
      "fundingInterval():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_fundingInterval(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "fundingInterval",
      "fundingInterval():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fundingRateFactor(): BigInt {
    let result = super.call(
      "fundingRateFactor",
      "fundingRateFactor():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_fundingRateFactor(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "fundingRateFactor",
      "fundingRateFactor():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDelta(
    _indexToken: Address,
    _size: BigInt,
    _averagePrice: BigInt,
    _isLong: boolean,
    _lastIncreasedTime: BigInt
  ): VaultFacet__getDeltaResult {
    let result = super.call(
      "getDelta",
      "getDelta(address,uint256,uint256,bool,uint256):(bool,uint256)",
      [
        ethereum.Value.fromAddress(_indexToken),
        ethereum.Value.fromUnsignedBigInt(_size),
        ethereum.Value.fromUnsignedBigInt(_averagePrice),
        ethereum.Value.fromBoolean(_isLong),
        ethereum.Value.fromUnsignedBigInt(_lastIncreasedTime)
      ]
    );

    return new VaultFacet__getDeltaResult(
      result[0].toBoolean(),
      result[1].toBigInt()
    );
  }

  try_getDelta(
    _indexToken: Address,
    _size: BigInt,
    _averagePrice: BigInt,
    _isLong: boolean,
    _lastIncreasedTime: BigInt
  ): ethereum.CallResult<VaultFacet__getDeltaResult> {
    let result = super.tryCall(
      "getDelta",
      "getDelta(address,uint256,uint256,bool,uint256):(bool,uint256)",
      [
        ethereum.Value.fromAddress(_indexToken),
        ethereum.Value.fromUnsignedBigInt(_size),
        ethereum.Value.fromUnsignedBigInt(_averagePrice),
        ethereum.Value.fromBoolean(_isLong),
        ethereum.Value.fromUnsignedBigInt(_lastIncreasedTime)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new VaultFacet__getDeltaResult(value[0].toBoolean(), value[1].toBigInt())
    );
  }

  getFundingFee(
    _token: Address,
    _size: BigInt,
    _entryFundingRate: BigInt
  ): BigInt {
    let result = super.call(
      "getFundingFee",
      "getFundingFee(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_size),
        ethereum.Value.fromUnsignedBigInt(_entryFundingRate)
      ]
    );

    return result[0].toBigInt();
  }

  try_getFundingFee(
    _token: Address,
    _size: BigInt,
    _entryFundingRate: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getFundingFee",
      "getFundingFee(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_size),
        ethereum.Value.fromUnsignedBigInt(_entryFundingRate)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNextAveragePrice(
    _indexToken: Address,
    _size: BigInt,
    _averagePrice: BigInt,
    _isLong: boolean,
    _nextPrice: BigInt,
    _sizeDelta: BigInt,
    _lastIncreasedTime: BigInt
  ): BigInt {
    let result = super.call(
      "getNextAveragePrice",
      "getNextAveragePrice(address,uint256,uint256,bool,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_indexToken),
        ethereum.Value.fromUnsignedBigInt(_size),
        ethereum.Value.fromUnsignedBigInt(_averagePrice),
        ethereum.Value.fromBoolean(_isLong),
        ethereum.Value.fromUnsignedBigInt(_nextPrice),
        ethereum.Value.fromUnsignedBigInt(_sizeDelta),
        ethereum.Value.fromUnsignedBigInt(_lastIncreasedTime)
      ]
    );

    return result[0].toBigInt();
  }

  try_getNextAveragePrice(
    _indexToken: Address,
    _size: BigInt,
    _averagePrice: BigInt,
    _isLong: boolean,
    _nextPrice: BigInt,
    _sizeDelta: BigInt,
    _lastIncreasedTime: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNextAveragePrice",
      "getNextAveragePrice(address,uint256,uint256,bool,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_indexToken),
        ethereum.Value.fromUnsignedBigInt(_size),
        ethereum.Value.fromUnsignedBigInt(_averagePrice),
        ethereum.Value.fromBoolean(_isLong),
        ethereum.Value.fromUnsignedBigInt(_nextPrice),
        ethereum.Value.fromUnsignedBigInt(_sizeDelta),
        ethereum.Value.fromUnsignedBigInt(_lastIncreasedTime)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNextFundingRate(_token: Address): BigInt {
    let result = super.call(
      "getNextFundingRate",
      "getNextFundingRate(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );

    return result[0].toBigInt();
  }

  try_getNextFundingRate(_token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNextFundingRate",
      "getNextFundingRate(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPosition(
    _account: Address,
    _collateralToken: Address,
    _indexToken: Address,
    _isLong: boolean
  ): VaultFacet__getPositionResult {
    let result = super.call(
      "getPosition",
      "getPosition(address,address,address,bool):(uint256,uint256,uint256,uint256,uint256,uint256,bool,uint256)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromAddress(_collateralToken),
        ethereum.Value.fromAddress(_indexToken),
        ethereum.Value.fromBoolean(_isLong)
      ]
    );

    return new VaultFacet__getPositionResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBoolean(),
      result[7].toBigInt()
    );
  }

  try_getPosition(
    _account: Address,
    _collateralToken: Address,
    _indexToken: Address,
    _isLong: boolean
  ): ethereum.CallResult<VaultFacet__getPositionResult> {
    let result = super.tryCall(
      "getPosition",
      "getPosition(address,address,address,bool):(uint256,uint256,uint256,uint256,uint256,uint256,bool,uint256)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromAddress(_collateralToken),
        ethereum.Value.fromAddress(_indexToken),
        ethereum.Value.fromBoolean(_isLong)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new VaultFacet__getPositionResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBoolean(),
        value[7].toBigInt()
      )
    );
  }

  getPositionDelta(
    _account: Address,
    _collateralToken: Address,
    _indexToken: Address,
    _isLong: boolean
  ): VaultFacet__getPositionDeltaResult {
    let result = super.call(
      "getPositionDelta",
      "getPositionDelta(address,address,address,bool):(bool,uint256)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromAddress(_collateralToken),
        ethereum.Value.fromAddress(_indexToken),
        ethereum.Value.fromBoolean(_isLong)
      ]
    );

    return new VaultFacet__getPositionDeltaResult(
      result[0].toBoolean(),
      result[1].toBigInt()
    );
  }

  try_getPositionDelta(
    _account: Address,
    _collateralToken: Address,
    _indexToken: Address,
    _isLong: boolean
  ): ethereum.CallResult<VaultFacet__getPositionDeltaResult> {
    let result = super.tryCall(
      "getPositionDelta",
      "getPositionDelta(address,address,address,bool):(bool,uint256)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromAddress(_collateralToken),
        ethereum.Value.fromAddress(_indexToken),
        ethereum.Value.fromBoolean(_isLong)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new VaultFacet__getPositionDeltaResult(
        value[0].toBoolean(),
        value[1].toBigInt()
      )
    );
  }

  getPositionFee(_sizeDelta: BigInt): BigInt {
    let result = super.call(
      "getPositionFee",
      "getPositionFee(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_sizeDelta)]
    );

    return result[0].toBigInt();
  }

  try_getPositionFee(_sizeDelta: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPositionFee",
      "getPositionFee(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_sizeDelta)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPositionLeverage(
    _account: Address,
    _collateralToken: Address,
    _indexToken: Address,
    _isLong: boolean
  ): BigInt {
    let result = super.call(
      "getPositionLeverage",
      "getPositionLeverage(address,address,address,bool):(uint256)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromAddress(_collateralToken),
        ethereum.Value.fromAddress(_indexToken),
        ethereum.Value.fromBoolean(_isLong)
      ]
    );

    return result[0].toBigInt();
  }

  try_getPositionLeverage(
    _account: Address,
    _collateralToken: Address,
    _indexToken: Address,
    _isLong: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPositionLeverage",
      "getPositionLeverage(address,address,address,bool):(uint256)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromAddress(_collateralToken),
        ethereum.Value.fromAddress(_indexToken),
        ethereum.Value.fromBoolean(_isLong)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUtilisation(_token: Address): BigInt {
    let result = super.call(
      "getUtilisation",
      "getUtilisation(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );

    return result[0].toBigInt();
  }

  try_getUtilisation(_token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUtilisation",
      "getUtilisation(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastFundingTimes(_token: Address): BigInt {
    let result = super.call(
      "lastFundingTimes",
      "lastFundingTimes(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );

    return result[0].toBigInt();
  }

  try_lastFundingTimes(_token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastFundingTimes",
      "lastFundingTimes(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidationFeeUsd(): BigInt {
    let result = super.call(
      "liquidationFeeUsd",
      "liquidationFeeUsd():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_liquidationFeeUsd(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidationFeeUsd",
      "liquidationFeeUsd():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  marginFeeBasisPoints(): BigInt {
    let result = super.call(
      "marginFeeBasisPoints",
      "marginFeeBasisPoints():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_marginFeeBasisPoints(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "marginFeeBasisPoints",
      "marginFeeBasisPoints():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  validateLiquidation(
    _account: Address,
    _collateralToken: Address,
    _indexToken: Address,
    _isLong: boolean,
    _raise: boolean
  ): VaultFacet__validateLiquidationResult {
    let result = super.call(
      "validateLiquidation",
      "validateLiquidation(address,address,address,bool,bool):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromAddress(_collateralToken),
        ethereum.Value.fromAddress(_indexToken),
        ethereum.Value.fromBoolean(_isLong),
        ethereum.Value.fromBoolean(_raise)
      ]
    );

    return new VaultFacet__validateLiquidationResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_validateLiquidation(
    _account: Address,
    _collateralToken: Address,
    _indexToken: Address,
    _isLong: boolean,
    _raise: boolean
  ): ethereum.CallResult<VaultFacet__validateLiquidationResult> {
    let result = super.tryCall(
      "validateLiquidation",
      "validateLiquidation(address,address,address,bool,bool):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromAddress(_collateralToken),
        ethereum.Value.fromAddress(_indexToken),
        ethereum.Value.fromBoolean(_isLong),
        ethereum.Value.fromBoolean(_raise)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new VaultFacet__validateLiquidationResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }
}

export class DecreasePositionCall extends ethereum.Call {
  get inputs(): DecreasePositionCall__Inputs {
    return new DecreasePositionCall__Inputs(this);
  }

  get outputs(): DecreasePositionCall__Outputs {
    return new DecreasePositionCall__Outputs(this);
  }
}

export class DecreasePositionCall__Inputs {
  _call: DecreasePositionCall;

  constructor(call: DecreasePositionCall) {
    this._call = call;
  }

  get _account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _collateralToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _indexToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _collateralDelta(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _sizeDelta(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _isLong(): boolean {
    return this._call.inputValues[5].value.toBoolean();
  }

  get _receiver(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class DecreasePositionCall__Outputs {
  _call: DecreasePositionCall;

  constructor(call: DecreasePositionCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class IncreasePositionCall extends ethereum.Call {
  get inputs(): IncreasePositionCall__Inputs {
    return new IncreasePositionCall__Inputs(this);
  }

  get outputs(): IncreasePositionCall__Outputs {
    return new IncreasePositionCall__Outputs(this);
  }
}

export class IncreasePositionCall__Inputs {
  _call: IncreasePositionCall;

  constructor(call: IncreasePositionCall) {
    this._call = call;
  }

  get _account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _collateralToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _indexToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _sizeDelta(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _isLong(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }
}

export class IncreasePositionCall__Outputs {
  _call: IncreasePositionCall;

  constructor(call: IncreasePositionCall) {
    this._call = call;
  }
}

export class LiquidatePositionCall extends ethereum.Call {
  get inputs(): LiquidatePositionCall__Inputs {
    return new LiquidatePositionCall__Inputs(this);
  }

  get outputs(): LiquidatePositionCall__Outputs {
    return new LiquidatePositionCall__Outputs(this);
  }
}

export class LiquidatePositionCall__Inputs {
  _call: LiquidatePositionCall;

  constructor(call: LiquidatePositionCall) {
    this._call = call;
  }

  get _account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _collateralToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _indexToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _isLong(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }

  get _feeReceiver(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class LiquidatePositionCall__Outputs {
  _call: LiquidatePositionCall;

  constructor(call: LiquidatePositionCall) {
    this._call = call;
  }
}
